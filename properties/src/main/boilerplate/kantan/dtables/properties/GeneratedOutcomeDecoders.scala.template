/*
 * Copyright 2019 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.dtables
package properties

trait GeneratedOutcomeDecoders {
  def decodeValue[E](name: String, outcome: Outcome)(implicit ed: EntryDecoder[E]): DecodeResult[E] =
    outcome.get(name).map {
      case OutcomeValue.Undefined => DecodeResult.error("Not a value but undefined")
      case OutcomeValue.Point(v) => ed.decode(v)
    }.getOrElse(DecodeResult.error(s"Expected a value for outcome entry $name but found none"))

  [#
  def decoder[[#E1: EntryDecoder#], O]([#n1: String#])(f: ([#E1#]) â‡’ O): OutcomeDecoder[O] = new OutcomeDecoder[O] {
    override def decode(outcome: Outcome): DecodeResult[O] =
      for {
        [#e1 <- decodeValue[E1](n1, outcome)#
        ]
      } yield f([#e1#])
  }#

  ]
}
